// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String    @unique
  passwordHash String    @map("password_hash")
  fullName     String    @map("full_name")
  Events       Event[]
  Charity      Charity[]

  @@map("users")
}

model Event {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  slug         String
  startDate    DateTime       @map("start_date") @db.Timestamptz()
  endDate      DateTime       @map("end_date") @db.Timestamptz()
  location     String
  ownerId      String         @map("owner_id") @db.Uuid
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  Owner        User           @relation(fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  EventCharity EventCharity[]

  @@map("events")
}

model Charity {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  slug         String
  description  String
  createdBy    String         @map("created_by") @db.Uuid
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  Creator      User           @relation(fields: [createdBy], references: [id], onDelete: Restrict, onUpdate: Restrict)
  EventCharity EventCharity[]

  @@map("charities")
}

model EventCharity {
  eventId   String  @map("event_id") @db.Uuid
  charityId String  @map("charityid") @db.Uuid
  donation  Decimal @default(3)
  color     String
  Event     Event   @relation(fields: [eventId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Charity   Charity @relation(fields: [charityId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([eventId, charityId])
  @@map("event_charity")
}

model Lead {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String     @map("first_name")
  lastName  String     @map("last_name")
  email     String
  company   String
  jobRole   String     @map("job_role")
  marketoId String?    @map("marketo_id")
  Donation  Donation[]
}

enum SourceType {
  FORM

  @@map("source_type")
}

model Donation {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId    String     @map("event_id") @db.Uuid
  charityId  String     @map("charityid") @db.Uuid
  source     SourceType @default(FORM)
  sourceMeta Json?      @map("source_meta") @db.JsonB
  leadId     String     @map("lead_id") @db.Uuid
  Lead       Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@map("donation")
}
