// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../erd.md"
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String    @unique
  passwordHash String?   @map("password_hash")
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  fullName     String    @map("full_name")
  Events       Event[]
  Charities    Charity[]

  @@map("users")
}

model Event {
  id               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  slug             String               @unique
  startDate        DateTime             @map("start_date") @db.Date()
  endDate          DateTime             @map("end_date") @db.Date()
  location         String
  twitter          String?
  donationAmount   Decimal              @default(3.00) @map("donation_amount")
  donationCurrency String               @default("usd") @map("donation_currency")
  collectLeads     Boolean              @default(false) @map("collect_leads")
  legalBlurb       String?              @map("legal_blurb")
  responseTemplate String               @default("Thank you for helping us donate {{donationAmount}} to {{charity.name}} at {{event.name}}.") @map("response_template")
  tweetTemplate    String               @default("I just helped @CockroachDB donate {{donationAmount}} to {{charity}} at {{event}}.") @map("tweet_template")
  createdBy        String               @map("created_by") @db.Uuid
  createdAt        DateTime             @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt        DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  Creator          User                 @relation(fields: [createdBy], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Charities        CharitiesForEvents[]
  Donations        Donation[]

  @@map("events")
}

model Charity {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String
  description String
  website     String?
  twitter     String?
  logoSVG     String?              @map("logo_svg")
  createdBy   String               @map("created_by") @db.Uuid
  createdAt   DateTime             @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  Creator     User                 @relation(fields: [createdBy], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Events      CharitiesForEvents[]
  Donations   Donation[]

  @@map("charities")
}

model CharitiesForEvents {
  eventId   String  @map("event_id") @db.Uuid
  charityId String  @map("charity_id") @db.Uuid
  color     String
  Event     Event   @relation(fields: [eventId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Charity   Charity @relation(fields: [charityId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([eventId, charityId])
  @@map("charities_events")
}

enum SourceType {
  FORM @map("form")

  @@map("source_type")
}

enum LeadScore {
  BADGE_SCAN        @map("badge_scan")
  CONVERSATION      @map("conversation")
  MEETING_REQUESTED @map("meeting_requested")

  @@map("lead_score")
}

model Donation {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId    String     @map("event_id") @db.Uuid
  charityId  String     @map("charity_id") @db.Uuid
  source     SourceType @default(FORM)
  sourceMeta Json?      @map("source_meta") @db.JsonB
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz
  Lead       Lead?
  Event      Event      @relation(fields: [eventId], references: [id])
  Charity    Charity    @relation(fields: [charityId], references: [id])

  @@map("donations")
}

model Lead {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String    @map("first_name")
  lastName   String    @map("last_name")
  email      String
  company    String
  jobRole    String    @map("job_role")
  score      LeadScore @default(BADGE_SCAN)
  notes      String?
  Donation   Donation  @relation(fields: [donationId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  donationId String    @unique @map("donation_id") @db.Uuid

  @@map("leads")
}

model i18n {
  namespace   String
  language    String
  key         String
  translation String

  @@id([key, language])
  @@index([language, translation])
}

enum crdb_internal_region {
  aws_ap_south_1   @map("aws-ap-south-1")
  aws_eu_central_1 @map("aws-eu-central-1")
  aws_us_east_1    @map("aws-us-east-1")
  aws_us_west_2    @map("aws-us-west-2")
}
